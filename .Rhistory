param = 'pet'
years=1990:2017
petFiles =file.path(PRISMpath,paste0("WYsum_files/pet_calc_Hargreaves/",
"PRISM_pet_calc_Hargreaves_stable_",
"4kmM2_WY",years,"_bil.bil"))
PRISMpath="B:/MASTERDATA/data_Climate/PRISM"
petFiles =file.path(PRISMpath,paste0("WYsum_files/pet_calc_Hargreaves/",
"PRISM_pet_calc_Hargreaves_stable_",
"4kmM2_WY",years,"_bil.bil"))
petStack = raster::stack(petFiles)
pet_ave=raster::calc(petStack,fun=mean,na.rm=T)
pptFiles =file.path(PRISMpath,paste0("WYsum_files/ppt/",
"PRISM_ppt_stable_4kmM2_WY",
years,"_bil.bil"))
pptStack = raster::stack(pptFiles)
ppt_ave=raster::calc(pptStack,fun=mean,na.rm=T)
AI = pet_ave/ppt_ave
AI = ppt_ave/pet_ave
writeRaster(AI , filename = paste0(PRISMpath,'/Aridity_Index_20260608.tif'), format = "GTiff")
install.packages("rasterVis")
library(raster)
library(rasterVis)
writeRaster(AI , filename = paste0(PRISMpath,'/Aridity_Index_20260608.tif'), format = "GTiff")
AI = pet_ave/ppt_ave
writeRaster(AI , filename = paste0(PRISMpath,'/Aridity_Index__2_20260608.tif'), format = "GTiff")
library(xlsx)
OUTPUT_folders = 'D:/Danyka/9 Phopshorus Use Efficiency/OUTPUTS/ExportRatios/'
WQ_folder = 'WRTDSresults/'
fileName = 'ErRatio_20230421.txt'
ZonalStatsYEAR = 2010
METDA = read.xlsx(paste0(OUTPUT_folders, 'Watershed_PropertyTable_20230309.xlsx'), sheetName = 'WatershedProperties')
aPS = read.csv(paste0(OUTPUT_folders,'agPS_2010_ZonalStatistics.csv'))
PS = read.csv(paste0(OUTPUT_folders,'PS_2010_ZonalStatistics.csv'))
HUM = read.csv(paste0(OUTPUT_folders,'HUM_2010_ZonalStatistics.csv'))
OUTPUT_folders = '../OUTPUTS/ExportRatios'
WQ_folder = 'WRTDSresults/'
fileName = 'ErRatio_20230421.txt'
ZonalStatsYEAR = 2010
METDA = read.xlsx(paste0(OUTPUT_folders, 'Watershed_PropertyTable_20230309.xlsx'), sheetName = 'WatershedProperties')
library(xlsx)
source("~/.active-rstudio-document", echo=TRUE)
View(Data)
View(data)
data.class()
data$HAYP
source("~/.active-rstudio-document", echo=TRUE)
install.packages("readr")
data$DATA17_5
library(dataRetrieval)
install.packages("dataRetrieval")
citation(package = "dataRetrieval")
require(devtools)
install_version("dataRetrieval", version = "2.7.11", repos = "http://cran.us.r-project.org")
install.packges('devtools')
install.packages('devtools')
install.packages("devtools")
citation(package = "EGRET")
citation(package = "dataRetrieval")
citation(package = "EGRET")
citation(package = "dataRetrieval")
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
source("B:/LabFiles/users/DanykaByrnes/4_Memoryscapes/CODE/Comparing_USGSNewdata_OurData.R", echo=TRUE)
aggregatedFlux = merge(aggregatedFlux, DKB_annualData_ss, by='Year')
View(aggregatedFlux)
View(DKB_annualData_ss)
# Pulling the pre-aggregated data to compare
DKB_annualData_ss =  DKB_annualData[which(DKB_annualData$Site == DKB_Site),]
DKB_Site
source("~/1_PhosphorusProject/US_Phosphorus/DATA_Regional_Surplus_Components_PUE.R", echo=TRUE)
setwd("~/1_PhosphorusProject/US_Phosphorus")
source("~/1_PhosphorusProject/US_Phosphorus/DATA_Regional_Surplus_Components_PUE.R", echo=TRUE)
source("~/1_PhosphorusProject/US_Phosphorus/DATA_Regional_Surplus_Components_PUE.R", echo=TRUE)
source("~/1_PhosphorusProject/US_Phosphorus/DATA_Regional_Surplus_Components_PUE.R", echo=TRUE)
setwd("~/1_PhosphorusProject/US_Phosphorus")
source("~/1_PhosphorusProject/US_Phosphorus/DATA_Regional_AgrLandUse.R", echo=TRUE)
i
j
# summing the binary file to get all the cropland
clipped_raster = terra::crop(R,
extent(Regions[j,]))
AgLand = terra::extract(clipped_raster,
Regions[j,],
fun=sum,
na.rm=TRUE,
df=TRUE)
source("~/1_PhosphorusProject/US_Phosphorus/DATA_Regional_AgrLandUse.R", echo=TRUE)
View(LU_extc)
write.table(LU_extc,
file = paste0(OUTPUT_folders,'RegionLandUse_tif.txt'),
row.names = FALSE)
i
length(files)
old_D = read.table(file = paste0(OUTPUT_folders,'HUC2LandUse_tif.txt'),
row.names = FALSE)
old_D = read.table(file = paste0(OUTPUT_folders,'HUC2LandUse_tif.txt'))
View(old_D)
old_D = read.table(file = paste0(OUTPUT_folders,'HUC2LandUse_tif.txt'), header = TRUE)
View(old_D)
# Create the mapping as a named vector
mapping <- c("17" = 1, "14" = 2, "12" = 3, "10" = 4, "8" = 5, "7" = 6, "3" = 7, "2" = 8, "1" = 9)
# Apply the mapping
old_D$REG <- mapping[as.character(old_D$REG)]
write.table(old_D,
file = paste0(OUTPUT_folders,'RegionLandUse_frac.txt'),
row.names = FALSE)
colnames(LU_extc) =c("a", 'b',"c", 'd', 'e')
View(LU_extc)
# Sort by Year then HUC
LU_extc = dplyr::arrange(LU_extc, YEAR, REG)
colnames(LU_extc) =c("REG", 'YEAR',"AG_cells", 'Tot_cells', 'FracAgLU')
# Sort by Year then HUC
LU_extc = dplyr::arrange(LU_extc, YEAR, REG)
